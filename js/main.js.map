{"version":3,"sources":["main.js","_gsap.js","_swiper.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"main.js","sourcesContent":["// accordeon action\r\ndocument.querySelectorAll('.faq-item').forEach((el) => {\r\n   el.querySelector('.faq-item__trigger').addEventListener('click', (e) => {\r\n      const trigger = e.currentTarget\r\n\r\n      if (el.classList.contains('active')) {\r\n         el.classList.remove('active')\r\n      } else {\r\n         document\r\n            .querySelectorAll('.faq-item')\r\n            .forEach((el) => el.classList.remove('active'))\r\n         el.classList.add('active')\r\n      }\r\n   })\r\n})\r\n\r\n//action slider toggle before after\r\n\r\nconst sliderItems = document.querySelectorAll('.give-floor-item')\r\nif (window.innerWidth <= 1024) {\r\n   sliderItems.forEach((el, index) => {\r\n      const images = [\r\n         ...el.querySelector('.give-floor-item-mobil__img').children,\r\n      ]\r\n      const btnBefore = el.querySelector(`#exemple${index + 1}-before`)\r\n      const btnAfter = el.querySelector(`#exemple${index + 1}-after`)\r\n\r\n      // console.log(btnAfter)\r\n      btnBefore.addEventListener('click', (e) => {\r\n         images[0].style.display = 'block'\r\n      })\r\n      btnAfter.addEventListener('click', (e) => {\r\n         images[0].style.display = 'none'\r\n      })\r\n   })\r\n}\r\n","document.addEventListener('DOMContentLoaded', (event) => {\r\n   //функция для разделения текста на буквы\r\n   const splitText = (className, newClassName) => {\r\n      let textElement = document.querySelector(className)\r\n      let text = textElement.textContent\r\n      textElement.innerHTML = '' // Очищаем текст\r\n\r\n      text.split('').forEach((letter) => {\r\n         let span = document.createElement('span')\r\n         span.textContent = letter\r\n         span.classList.add(newClassName)\r\n         textElement.appendChild(span)\r\n      })\r\n   }\r\n\r\n   splitText('.now-imagine__text', 'now-imagine__text--letter')\r\n   splitText('.solution__text', 'solution__text--letter')\r\n\r\n   //анимируем плавное заполнение текста\r\n   gsap.to('.now-imagine__text--letter', {\r\n      color: '#FFFFFF', // Меняем цвет на яркий\r\n      stagger: 0.03, // Поочередное появление букв\r\n      scrollTrigger: {\r\n         trigger: '.now-imagine__text',\r\n         start: 'top 100%',\r\n         toggleActions: 'play',\r\n      },\r\n   })\r\n   gsap.to('.solution__text--letter', {\r\n      color: '#FFFFFF', // Меняем цвет на яркий\r\n      stagger: 0.03, // Поочередное появление букв\r\n      scrollTrigger: {\r\n         trigger: '.solution__text',\r\n         start: 'top 80%',\r\n         toggleActions: 'play',\r\n      },\r\n   })\r\n\r\n   //липкая кнопка .hero-contact-us\r\n   gsap.to('.hero-contact-us', {\r\n      scrollTrigger: {\r\n         trigger: '.btn-scroll', // Когда доскроллим до этого блока\r\n         start: 'bottom bottom', // Когда верхняя часть блока достигнет центра экрана\r\n         end: 'top top',\r\n         onEnter: () =>\r\n            document.querySelector('.hero-contact-us').classList.add('sticky'),\r\n         onLeaveBack: () =>\r\n            document\r\n               .querySelector('.hero-contact-us')\r\n               .classList.remove('sticky'),\r\n         // markers: false,\r\n      },\r\n   })\r\n\r\n   //блюр в с рандомной задержкой\r\n   document.querySelectorAll('.we-know__list-item').forEach((el) => {\r\n      gsap.to(el, {\r\n         // filter: () => `blur(${gsap.utils.random(0, 8)}px)`,\r\n         duration: gsap.utils.random(2, 5), // Разная скорость анимации\r\n         repeat: -1, // Бесконечный цикл\r\n         yoyo: true, // Возвращение к изначальному значению\r\n         stagger: {\r\n            // Рандомное время старта для каждого элемента\r\n            each: gsap.utils.random(0, 1),\r\n            repeatRefresh: true, // Генерирует новое значение для каждого повтора\r\n         },\r\n      })\r\n   })\r\n\r\n   //запуск анимации заполнения круговой индикатор прогресса\r\n   gsap.from('.circle-progres', {\r\n      strokeDashoffset: '511.82px',\r\n\r\n      duration: 3,\r\n      scrollTrigger: {\r\n         trigger: '.circle-progres',\r\n         start: 'top 100%',\r\n         toggleActions: 'play',\r\n      },\r\n   })\r\n\r\n   //анимация списка с заполнением кружков\r\n   const resultList = document.querySelectorAll('.result-item')\r\n   let currentAnimationResultList\r\n\r\n   const activeitItemFromResultList = (index = 0) => {\r\n      if (currentAnimationResultList) {\r\n         currentAnimationResultList.kill()\r\n      }\r\n      resultList.forEach((el) => {\r\n         el.classList.remove('active')\r\n      })\r\n\r\n      if (index >= resultList.length) {\r\n         index = 0\r\n      }\r\n      resultList[index].classList.add('active')\r\n\r\n      currentAnimationResultList = gsap.delayedCall(6, () => {\r\n         activeitItemFromResultList(index + 1)\r\n      })\r\n   }\r\n\r\n   ScrollTrigger.create({\r\n      trigger: '.result', // замени на нужный тебе селектор\r\n      start: 'top 70%', // когда верх секции достигнет 70% окна\r\n      once: true, // запустится один раз\r\n      // markers: true,\r\n      onEnter: () => {\r\n         activeitItemFromResultList()\r\n      },\r\n   })\r\n\r\n   resultList.forEach((el, index) => {\r\n      el.addEventListener('click', (e) => {\r\n         activeitItemFromResultList(index)\r\n      })\r\n   })\r\n\r\n   //анимация мушек\r\n   function moveRandomly(spot) {\r\n      gsap.to(spot, {\r\n         x: `+=${gsap.utils.random(-100, 100)}`, // Случайное смещение по X\r\n         y: `+=${gsap.utils.random(-100, 100)}`, // Случайное смещение по Y\r\n         rotation: gsap.utils.random(-180, 180), // Случайный поворот\r\n         duration: gsap.utils.random(5, 10), // Случайная скорость\r\n         ease: 'power1.inOut',\r\n         onComplete: () => moveRandomly(spot), // Повторяем движение с новыми параметрами\r\n      })\r\n   }\r\n   const arraySpot = [\r\n      ...document.querySelectorAll('.projects-bg__el'),\r\n      ...document.querySelectorAll('.hero__bg-crcl'),\r\n   ]\r\n\r\n   document\r\n   arraySpot.forEach((spot) => moveRandomly(spot))\r\n\r\n   //анимация облаков\r\n   document.querySelectorAll('nom-imagine-star')\r\n   const animationCloudes = (cloudsGrup, grupStepX, elStepX) => {\r\n      const tl = gsap.timeline()\r\n\r\n      tl.from(cloudsGrup, {\r\n         x: grupStepX,\r\n         duration: 2,\r\n         ease: 'power3',\r\n      })\r\n      tl.from(\r\n         cloudsGrup.children,\r\n         {\r\n            x: elStepX,\r\n            stagger: 0.1,\r\n            duration: 2,\r\n            ease: 'power3',\r\n         },\r\n         '<1',\r\n      )\r\n      return tl\r\n   }\r\n   const cloudsLeftTop = document.querySelector('.now-imagine-clouds__top-left')\r\n   const cloudsRightTop = document.querySelector(\r\n      '.now-imagine-clouds__top-right',\r\n   )\r\n   const cloudsLeftBottom = document.querySelector(\r\n      '.now-imagine-clouds__bottom-left',\r\n   )\r\n   const cloudsRightBottom = document.querySelector(\r\n      '.now-imagine-clouds__bottom-right',\r\n   )\r\n\r\n   const timelineCloud = gsap.timeline({\r\n      scrollTrigger: {\r\n         trigger: '.now-imagine',\r\n         start: 'top center',\r\n      },\r\n   })\r\n\r\n   timelineCloud\r\n      .add(animationCloudes(cloudsLeftTop, -200, -50))\r\n      .add(animationCloudes(cloudsRightTop, 250, 150), '<0.1')\r\n      .from(\r\n         '.nom-imagine-moon',\r\n         {\r\n            x: -100,\r\n            opacity: 0,\r\n            scale: 0.8,\r\n            rotate: 20,\r\n            duration: 5,\r\n            ease: 'power3',\r\n         },\r\n         '<1',\r\n      )\r\n      .from(\r\n         '.now-imagine-clouds__top-center',\r\n         {\r\n            x: 100,\r\n            opacity: 0.7,\r\n            scale: 0.8,\r\n            duration: 3,\r\n            ease: 'power3',\r\n         },\r\n         '<1.1',\r\n      )\r\n      .add(animationCloudes(cloudsLeftBottom, -300, -200), '<0.7')\r\n      .add(animationCloudes(cloudsRightBottom, 350, 250), '<0.1')\r\n\r\n   //анимация звезд\r\n   document.querySelectorAll('.nom-imagine-star').forEach((el) => {\r\n      gsap.to(el, {\r\n         scale: 0.1,\r\n         duration: gsap.utils.random(3, 5), // Разная скорость анимации\r\n         opacity: gsap.utils.random(0.7, 1),\r\n         repeat: -1, // Бесконечный цикл\r\n         yoyo: true, // Возвращение к изначальному значению\r\n         stagger: {\r\n            // Рандомное время старта для каждого элемента\r\n            each: gsap.utils.random(0, 1),\r\n            repeatRefresh: true, // Генерирует новое значение для каждого повтора\r\n         },\r\n      })\r\n   })\r\n\r\n   //анимация projects-item\r\n   const sectionProjects = document.querySelector('.projects__wrapper')\r\n   const skrollDistansProjects = 6000\r\n   const projectItems = document.querySelectorAll('.projects-item')\r\n   document.querySelector('.result').style.marginTop =\r\n      skrollDistansProjects + 'px'\r\n\r\n   const tlProjects = gsap.timeline({\r\n      scrollTrigger: {\r\n         trigger: sectionProjects,\r\n         start: 'top top',\r\n         end: `+=${skrollDistansProjects}`,\r\n         pin: true,\r\n         scrub: 1,\r\n         pinSpacing: false,\r\n         markers: true,\r\n      },\r\n   })\r\n   projectItems.forEach((el, index, arr) => {\r\n      // tlProjects.to(el, { y: '-100vh' }, '-=0.41')\r\n      tlProjects.to(el, { y: '-100%' }, '-=0.3')\r\n      // tlProjects.to(el, { y: '-100%' })\r\n   })\r\n\r\n   // const secProjects = document.querySelector('.projects')\r\n   // const triggerSecProg = secProjects.querySelector('.projects__wrapper')\r\n   // const listrSecProg = secProjects.querySelector('.projects__items')\r\n   // const heightListProg = listrSecProg.clientHeight\r\n   // const scrollDistanceProj = 3000\r\n   // const actionTranslateY = heightListProg + window.innerHeight / 3\r\n   // secProjects.style.marginBottom = `${scrollDistanceProj}px`\r\n   // listrSecProg.style.transform = `translateY(${window.innerHeight}px)`\r\n   // console.log(heightListProg)\r\n   // const tlProjects = gsap.timeline({\r\n   //    scrollTrigger: {\r\n   //       trigger: triggerSecProg,\r\n   //       start: 'top top',\r\n   //       end: `+=${scrollDistanceProj}`,\r\n   //       pin: true,\r\n   //       scrub: 1,\r\n   //       pinSpacing: false,\r\n   //       // markers: true,\r\n   //    },\r\n   // })\r\n\r\n   // tlProjects.to(listrSecProg, { y: -actionTranslateY })\r\n\r\n   //анимация цифр\r\n   const animateCount = (element, targetValue) => {\r\n      const count = { value: 0 }\r\n\r\n      gsap.to(count, {\r\n         value: targetValue,\r\n         duration: 3,\r\n         scrollTrigger: {\r\n            trigger: element,\r\n            start: 'top center',\r\n            toggleActions: 'play none none none',\r\n         },\r\n         onUpdate: () => {\r\n            element.textContent = `${Math.round(count.value)}`\r\n         },\r\n      })\r\n   }\r\n\r\n   document.querySelectorAll('.we-fabula-column__title--num').forEach((el) => {\r\n      const targetValue = parseInt(el.getAttribute('data-target')) || 100\r\n\r\n      animateCount(el, targetValue)\r\n   })\r\n\r\n   //анимация секции we offer\r\n   const sectionOffer = document.querySelector('.offer')\r\n   const offerElementsInfo = document.querySelectorAll('.offer-item__info')\r\n   const lottieElements = document.querySelectorAll('.offer-item__img')\r\n   const scrollDistanceOffer = 4500\r\n   const nextSection = document.querySelector('.we-fabula')\r\n   nextSection.style.marginTop = `${scrollDistanceOffer}px`\r\n\r\n   const tlOffer = gsap.timeline({\r\n      scrollTrigger: {\r\n         trigger: sectionOffer,\r\n         start: 'top top',\r\n         end: `+=${scrollDistanceOffer}`,\r\n         pin: true,\r\n         scrub: 1,\r\n         // markers: true,\r\n         // onLeave: () => {\r\n         //    // Запуск второй анимации после скролла первой\r\n         //    gsap.to(offerElementsInfo[2], { y: '-50vh', opacity: 0 })\r\n         // },\r\n         // onEnterBack: () => {\r\n         //    // Запуск второй анимации после скролла первой\r\n         //    gsap.to(offerElementsInfo[2], { y: '0', opacity: 1 })\r\n         // },\r\n      },\r\n   })\r\n\r\n   tlOffer\r\n      .to({}, { duration: 1 })\r\n      .to(lottieElements[0], { opacity: 0 })\r\n      .to(offerElementsInfo[0], { y: '-50vh', opacity: 0 })\r\n      .to(offerElementsInfo[1], { y: '0' })\r\n      .to(lottieElements[1], { opacity: 1 })\r\n      .to({}, { duration: 1 })\r\n      .to(lottieElements[1], { opacity: 0 })\r\n      .to(offerElementsInfo[1], { y: '-50vh', opacity: 0 })\r\n      .to(offerElementsInfo[2], { y: '0' })\r\n      .to(lottieElements[2], { opacity: 1 })\r\n      .to({}, { duration: 1 })\r\n      .to(lottieElements[2], { opacity: 0 })\r\n      .to(offerElementsInfo[2], { y: '-30vh', opacity: 0.1 })\r\n\r\n   //footer анимация\r\n   const footerBg = document.querySelector('.footer__bg')\r\n   const footer = document.querySelector('.footer')\r\n\r\n   gsap.from(footerBg, {\r\n      y: 0,\r\n      // scale: 0,\r\n      duration: 2,\r\n      scrollTrigger: {\r\n         trigger: footer,\r\n         start: 'top bottom',\r\n      },\r\n   })\r\n})\r\n","//проверка работы слайдера\r\n\r\nconst swiper4 = new Swiper('.give-floor-slider', {\r\n   slidesPerView: 1,\r\n   loopedSlides: 1,\r\n   centeredSlides: true,\r\n   spaceBetween: 0,\r\n   loop: true,\r\n   pagination: {\r\n      el: '.give-floor-slider-pagination',\r\n      clickable: true,\r\n   },\r\n})\r\n"]}